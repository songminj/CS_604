# Ch.10 회복과 병행 제어

## 트랜잭션

* 다수의 사용자가 동시에 사용하더라도 모순 X, 정확한 데이터 유지

* 작업 하나를 위해 필요한 연산을 모은 것 = 트랜잭션

ex) 계좌이체: 보낸 사람과 받는 사람의 계좌를 각각 UPDATE

### 특성

* 원자성: 트랜잭션이 모두 실행 or 모두 실행 X
* 일관성: 트랜잭션 수행 후 데이터베이스 상태 유지
* 격리성: 트랜잭션 완료 전까지 중간 연산에 접근 불가
* 지속성: 트랜잭션의 작업 결과는 없어지지 않음

### 상태

1. 활동
2. -> 부분완료 -> commit -> 완료
2. -> 실패 -> rollback -> 철회

## 장애와 회복

* 데이터베이스의 일관성 유지에 필요
* 장애 발생 시 이전 상태로 복구
* 덤프(데이터베이스의 복제된 데이터)
* 로그(변경 시 마다 변경 이전/이후를 기록)

### 로그 회복 기법

* 즉시 갱신: 트랜잭션 중 변경한 연산을 데이터베이스에 즉시 반영
* 지연 갱신: 트랜잭션 수행 중에는 로그에 기록, 부분 완료 후 한 번에 반영

## 병행 제어

* 여러 트랜잭션을 동시에 수행함
* 보통은 여러 트랜잭션이 번갈아 수행(인터리빙)
* 동시에 같은 데이터에 접근 시 변수발생

### 문제점

* 갱신 분실: 트랜잭션의 데이터 변경 연산을 다른 트랜잭션이 덮어씀
* 모순성: 여러 데이터 변경 연산을 실행시 일관성 없는 상태의 DB에서 가져와 모순 결과 발생
    * 트랜잭션 전의 DB와 트랜잭션 후의 DB를 각기 가져와 연산
* 연쇄 복귀: 트랜잭션 장애로 rollback시, 또 다른 트랜잭션의 rollback으로 인해 문제가 발생

